# This file is a template, and might need editing before it works on your project.
# Official docker image.

# Predefined Variables: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# Custom Varibles:      Project > Settings > CI/CD and expand Variables.
# image: docker:latest

# services:
#   - docker:dind

# variables:
#   DOCKER_DRIVER: overlay2
#   # Create the certificates inside this directory for both the server
#   # and client. The certificates used by the client will be created in
#   # /certs/client so we only need to share this directory with the
#   # volume mount in `config.toml`.
#   DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - docker info
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - export port_http=80
  - export port_https=443
  - export port_api=8080
  # - docker system prune -a -f
  # - docker stop $(docker ps -q)
  # - docker rm $(docker ps -a -q)
  # - docker images

# Run sequentially
stages:
  - build
  - clean_up

alpine3.9: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

alpine3.9_tools: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

centos7: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

centos7.6: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

centos8: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

debian9: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

debian10: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

ubuntu16.04: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

ubuntu18.04: # CI_JOB_NAME
  stage: build
  variables:
    NAME: nginx-plus-$CI_JOB_NAME
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    - cp -R etc/ Dockerfiles/$CI_JOB_NAME/
    - docker build -t $NAME Dockerfiles/$CI_JOB_NAME
    - export port_http=$((port_http+1))
    - export port_https=$((port_https+1))
    - export port_api=$((port_api+1))
    - docker run --name	$NAME -d -p $port_http:80 -p $port_https:443 -p $port_api:8080 $NAME
    - docker tag $NAME ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:r18-$CI_JOB_NAME
    - docker stop $NAME
    - docker rm $NAME

clean_up:
  stage: clean_up
  script:
    - unset port_http
    - unset port_https
    - docker system prune -f
    - docker images
## Keywords description & links to the documentation
## Basics: https://about.gitlab.com/blog/2016/07/29/the-basics-of-gitlab-ci/
#  * Keyword/term -	Description
#  * .gitlab-ci.yml	-	File containing all definitions of how your project should be built
#  * script	Defines -	a shell script to be executed
#  * before_script	-	Used to define the command that should be run before (all) jobs
#  * image	Defines -	what docker image to use
#  * stage	-	Defines a pipeline stage (default: test)
#  * artifacts	-	Defines a list of build artifacts
#  * artifacts:expire_in	-	Used to delete uploaded artifacts after the specified time
#  * pipelines	-	A pipeline is a group of builds that get executed in stages (batches)